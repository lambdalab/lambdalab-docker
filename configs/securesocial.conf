logger.securesocial=INFO

securesocial {
  #
  # If enabled, sets the path to your copy of Bootstrap.css to be used instead of the default one provided by SecureSocial
  #
  #bootstrapCssPath="your path"


  #
  # If enabled, sets the Favicon to display when in SecureSocial pages
  #
  #faviconPath="your path"


  #
  # If enabled, sets the path to your copy of JQuery to be used instead of the default one provided by SecureSocial
  #
  #jqueryPath="your path"


  #
  # If enabled, injects this Css file into all SecureSocial pages, allowing for minor style customizations
  # If you want to do major changes, please read about custom templates in SecureSocial
  #
  #customCssPath="your path"

  #
  # Where to redirect the user if SecureSocial can't figure that out from
  # the request that led the use to the login page
  #
  onLoginGoTo=${codatlas.frontendConfig.frontendUrl}/account/projects

  enableRefererAsOriginalUrl=false

  #
  # Where to redirect the user when he logs out. If not set SecureSocial will redirect to the login page
  #
  onLogoutGoTo=${codatlas.frontendConfig.frontendUrl}/loggedout

  #
  # Where to redirect the user when he/she starts the signup process.
  # If not set SecureSocial will redirect to the login page
  #
  onStartSignUpGoTo=${codatlas.frontendConfig.frontendUrl}/login

  #
  # Where to redirect the user when he/she signs up.
  # If not set SecureSocial will redirect to the login page
  #
  onSignUpGoTo=${codatlas.frontendConfig.frontendUrl}/login

  #
  # Where to redirect the user when he starts the password reset process.
  # If not set SecureSocial will redirect to the login page
  #
  onStartResetPasswordGoTo=${codatlas.frontendConfig.frontendUrl}/login

  #
  # Where to redirect the user when he resets his/her password.
  # If not set SecureSocial will redirect to the login page
  #
  onResetPasswordGoTo=${codatlas.frontendConfig.frontendUrl}/login

  #
  # Where to redirect the user when he changes his/her password.
  # If not set SecureSocial will redirect to the password change page
  #
  onPasswordChangeGoTo=${codatlas.frontendConfig.frontendUrl}/password

  #
  # Enable SSL for oauth callback urls, login/signup/password recovery pages and the authenticator cookie
  #
  ssl=false

  #
  # Parameters for the cookie used to track users.
  #
  cookie {
    #
    # The cookie name (defaults to 'id')
    #name=id

    #
    # The path for which the cookie should be sent by the browser (defaults to /)
    #
    #path=/

    #
    # The domain for which the cookie should be sent (it is left empty by default)
    #
    #domain=some_domain

    #
    # If set to true, the cookie is not readable by a client side script (defaults to true).
    #
    #httpOnly=true

    #
    # The amount of time the session id will remain valid since the last request
    #
    idleTimeoutInMinutes=31680

    #
    # The amount of time the session id will be valid since the user authenticated.
    # After this the user will need to re-authenticate
    #
    absoluteTimeoutInMinutes=64800

    makeTransient=false
  }

//  Uncomment the following section if you want to use Codatlas with GitLab integration. And also uncomment the realted fields in configs/securesocial.conf.
//  gitlab {
//    baseUrl="YOUR-GITLAB-URL"
//    authorizationUrl=${securesocial.gitlab.baseUrl}/oauth/authorize
//    accessTokenUrl=${securesocial.gitlab.baseUrl}/oauth/token
//  }

  github {
    baseUrl="https://github.com"
    authorizationUrl=${securesocial.github.baseUrl}/login/oauth/authorize
    accessTokenUrl=${securesocial.github.baseUrl}/login/oauth/access_token
    scope="user:email,public_repo"
  }

  github-private : ${securesocial.github} {
    scope="user:email,repo"
  }
//
//  google {
//    authorizationUrl="https://accounts.google.com/o/oauth2/auth"
//    accessTokenUrl="https://accounts.google.com/o/oauth2/token"
//    scope="profile email"
//  }
//
//  bitbucket {
//    requestTokenUrl="https://bitbucket.org/api/1.0/oauth/request_token"
//    accessTokenUrl="https://bitbucket.org/api/1.0/oauth/access_token"
//    authorizationUrl="https://bitbucket.org/api/1.0/oauth/authenticate"
//  }
//
  bitbucket-cloud {
    baseUrl="https://bitbucket.org"
    authorizationUrl=${securesocial.bitbucket-cloud.baseUrl}/site/oauth2/authorize
    accessTokenUrl=${securesocial.bitbucket-cloud.baseUrl}/site/oauth2/access_token
  }

  userpass {
    #
    # Enable username support, otherwise SecureSocial will use the emails as user names
    #
    withUserNameSupport=false
    sendWelcomeEmail=true
    tokenDuration=60
    tokenDeleteInterval=5
    signupSkipLogin=true
    minimumPasswordLength=6
  }

  idLengthInBytes = 32
}
