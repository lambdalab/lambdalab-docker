version: '2.3'
services:
  db:
    image: '${LIBRARY_REGISTRY}library/mongo:3.4'
    entrypoint:
      - mongod
      - --dbpath
      - /data/db
      - --logpath
      - /logs/mongo.log
      - --httpinterface
      - --rest
      - --setParameter
      - failIndexKeyTooLong=false
    healthcheck:
      test: ["CMD-SHELL", "echo 'db.stats().ok' | mongo  --quiet"]
      interval: 30s
      start_period: 30s
      retries: 5
    volumes:
      - ./data/mongodb/db:/data/db
      - ./logs/mongodb:/logs
    ports:
      - 27017:27017 # TODO hide this port in the future
      - 28017:28017
    restart: always
  redis: # TODO mount redis disk volume
    image: '${LIBRARY_REGISTRY}library/redis:3.2'
    command:
      - --bind 0.0.0.0
    ports:
      - 6379:6379
    restart: always
  elasticsearch:
    image: '${LIBRARY_REGISTRY}lambdalab/elasticsearch-xpack:5.5.2'
    volumes:
      - ./data/elasticsearch:/data
      - ./logs/elasticsearch:/logs
      - ./thirdparty/elasticsearch/config:/usr/share/elasticsearch/config
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      - CLUSTER_NAME=ElasticsearchEnterprise
    restart: always
  dataservice:
    image: '${REGISTRY}lambdalab/dataservice:${VERSION}'
    command: ["bash", "-c", "cp /root/.gitconfig_ref /root/.gitconfig && /lambda_home/dataservice/start"]
    depends_on:
      - db
    volumes:
      - ./data/projects:/lambda_home/data/projects
      - ./logs:/lambda_home/logs
      - ./configs:/lambda_home/configs
      - ~/.ssh:/root/.ssh
      - ~/.git-credentials:/root/.git-credentials
      - ~/.gitconfig:/root/.gitconfig_ref
      - /etc/krb5.conf:/etc/krb5.conf
      - ./jaas.conf:/etc/jaas.conf
      - /tmp/krb5cc_0:/tmp/krb5cc_0
    ports:
      - 10020:10020
      - 9418:9418
    restart: always
  projectservice:
    image: '${REGISTRY}lambdalab/projectservice:${VERSION}'
    depends_on:
      - db
    volumes:
      - ./data/projects:/lambda_home/data/projects
      - ./logs:/lambda_home/logs
      - ./configs:/lambda_home/configs
    restart: always
  liaceservice:
    image: '${REGISTRY}lambdalab/liaceservice:${VERSION}'
    depends_on:
      - db
      - elasticsearch
    volumes:
      - ./configs:/lambda_home/configs
      - ./logs:/lambda_home/logs
    restart: always
  metadataservice:
    image: '${REGISTRY}lambdalab/metadataservice:${VERSION}'
    depends_on:
      - db
    volumes:
      - ./configs:/lambda_home/configs
      - ./logs:/lambda_home/logs
    ports:
      - 10060:10060
    restart: always
  pygments:
    image: '${REGISTRY}lambdalab/pygments:${VERSION}'
    depends_on:
      - db
    volumes:
      - ./configs:/lambda_home/configs
      - ./logs:/lambda_home/logs
    restart: always
  webserver:
    image: '${REGISTRY}lambdalab/codatlas:${VERSION}'
    depends_on:
      - db
      - redis
      - rabbitmq
    volumes:
      - ./configs:/lambda_home/configs
      - ./logs:/lambda_home/logs
      - ./certs:/lambda_home/certs
    ports:
      - 9000:9000
    restart: always
  nginx:
    image: '${LIBRARY_REGISTRY}library/nginx:1.10'
    depends_on:
      - webserver
    ports:
      - 80:80
      - 443:443 # only useful if you are using https
    volumes:
      - ./thirdparty/nginx/sites-available:/etc/nginx/conf.d
      - ./docs:/lambda_home/docs
      - ./plugins:/lambda_home/plugins
      - ./certs:/lambda_home/certs
    restart: always
  jenkins:
    image: '${REGISTRY}lambdalab/jenkins:${VERSION}'
    volumes:
      - ./data/jenkins_home:/var/jenkins_home
    ports:
      - 8080:8080
      - 50000:50000
    restart: always
  jenkins-slave:
    build:
      context: ./tools/${REGISTRY}
    image: 'local/tools:${VERSION}'
    environment:
      - JENKINS_MASTER=http://jenkins:8080
      - EXECUTOR_NUM=4
    volumes:
      - ./android-sdk-linux:/lambda_home/tools/android-sdk
      - ./data/jenkins_slave_home:/home/jenkins
    depends_on:
      - jenkins
      - metadataservice
    restart: always
    mem_limit: 4g
  rabbitmq:
    image: 'rabbitmq:3.6-management'
    ports:
      - 5672:5672
      - 4369:4369
      - 15672:15672
    volumes:
      - ./data/rabbitmq:/var/lib/rabbitmq
    restart: always